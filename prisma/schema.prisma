// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model DiagnosticTest {
  id          String   @id @default(uuid())
  patientName String
  testType    String
  result      String
  testDate    DateTime @default(now())
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
}

model TestResult {
  id            String      @id @default(uuid())
  appointment   Appointment @relation(fields: [appointmentId], references: [id])
  appointmentId String      @unique
  doctor        Doctors     @relation(fields: [doctorId], references: [id])
  doctorId      String
  result        String      @default("N/A")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
}

model Appointment {
  id              String            @id @default(uuid())
  patientName     String
  email           String
  phone           String
  appointmentDate DateTime
  test            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @default(now())
  status          AppointmentStatus @default(PENDING)
  TestResult      TestResult[]
  doctor          Doctors?          @relation(fields: [doctorId], references: [id])
  doctorId        String?
}

enum AppointmentStatus {
  PENDING
  APPROVED
  DECLINED
  COMPLETED
  CANCELLED
}

model Doctors {
  id          String        @id @default(uuid())
  name        String
  email       String        @unique
  specialty   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  TestResult  TestResult[]
  Appointment Appointment[]
}
